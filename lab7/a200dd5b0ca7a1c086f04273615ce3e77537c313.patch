From a200dd5b0ca7a1c086f04273615ce3e77537c313 Mon Sep 17 00:00:00 2001
From: rafael <rafael.dousse@heig-vd.ch>
Date: Fri, 10 Nov 2023 16:28:22 +0100
Subject: [PATCH] End of lab

---
 usr/src/sh.c | 83 +++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 76 insertions(+), 7 deletions(-)

diff --git a/usr/src/sh.c b/usr/src/sh.c
index 3569113..cf6b42e 100644
--- a/usr/src/sh.c
+++ b/usr/src/sh.c
@@ -33,7 +33,7 @@
 #define ARGS_MAX	16
 
 char tokens[TOKEN_NR][80];
-char prompt[] = "so3% ";
+char prompt[] = "so_trois% ";
 
 void parse_token(char *str) {
 	int i = 0;
@@ -57,6 +57,11 @@ void process_cmd(void) {
 	char *argv[ARGS_MAX];
 	char filename[30];
 	int pid, sig;
+	int pipe_on = 0;
+	int pipe_fd[2];
+	char *argv2[ARGS_MAX];
+	int arg_pos2;
+	int pid_second_child;
 
 	/* PRIVATE to SYE team */
 
@@ -133,16 +138,75 @@ void process_cmd(void) {
 
 	/* Prepare the arguments to be passed to exec() syscall */
 	arg_pos = 0;
+	arg_pos2 = 0;
 	while (tokens[arg_pos][0] != 0) {
-		argv[arg_pos] = tokens[arg_pos];
+		//Here we have to check if there is a pipe
+		if(!strcmp(tokens[arg_pos], "|")){	
+			pipe_on = 1;
+			/* Terminate the list of args properly */
+			argv[arg_pos] = NULL;
+		} else {
+			//If there is a pipe, we have to put the arguments in argv2 to precess the command in the pipe
+			if(pipe_on){
+				argv2[arg_pos2] = tokens[arg_pos];
+				arg_pos2++;
+			} else{
+				argv[arg_pos] = tokens[arg_pos];
+				
+			}
+			
+		}
 		arg_pos++;
+		
 	}
-	/* Terminate the list of args properly */
-	argv[arg_pos] = NULL;
+
+	if(pipe_on){
+		argv2[arg_pos2] = NULL;
+	} else {
+		argv[arg_pos] = NULL;
+	}
+
 
 	pid_child = fork();
 	if (!pid_child) { /* Execution in the child */
 
+		if (pipe_on) {
+
+			pipe(pipe_fd);
+			pid_second_child = fork();
+
+				if(!pid_second_child){
+					close(pipe_fd[0]);
+					dup2(pipe_fd[1], STDOUT_FILENO);
+
+					strcpy(filename, argv[0]);
+					strcat(filename, ".elf");
+
+				if (execv(filename, argv) == -1) {
+					printf("%s: exec failed.\n", argv[0]);
+					exit(-1);
+				}
+
+
+			} else {
+				close(pipe_fd[1]);
+				dup2(pipe_fd[0], STDIN_FILENO);
+				
+				strcpy(filename, argv2[0]);
+				strcat(filename, ".elf");
+
+			if (execv(filename, argv2) == -1) {
+				printf("%s: exec failed.\n", argv2[0]);
+				exit(-1);
+
+
+			}
+			waitpid(pid_second_child, NULL, 0);
+
+		}
+
+	} else { /* Execution in the parent */
+
 		strcpy(filename, tokens[0]);
 		argv[0] = tokens[0];
 
@@ -154,10 +218,13 @@ void process_cmd(void) {
 			exit(-1);
 		}
 
-	} else { /* Execution in the parent */
-
-		waitpid(pid_child, NULL, 0);
+		
 	}
+		
+  } else {
+	  
+	waitpid(pid_child, NULL, 0);
+  }
 }
 
 /*
@@ -176,6 +243,8 @@ void main(int argc, char *argv[])
 	char user_input[80];
 	int i;
 	struct sigaction sa;
+	
+
 
 	memset(&sa, 0, sizeof(struct sigaction));
 
-- 
GitLab


From 13fc235ea7147c56be37ee0c4954a3ced7bad3d7 Mon Sep 17 00:00:00 2001
From: rafael <rafael.dousse@heig-vd.ch>
Date: Fri, 13 Oct 2023 16:07:07 +0200
Subject: [PATCH] Fin labo 4

---
 rapport.md                     | 19 +++++++++++
 so3/include/process.h          |  1 +
 so3/include/syscall.h          |  3 ++
 so3/kernel/process.c           | 62 ++++++++++++++++++++++++++++++++++
 so3/kernel/syscalls.c          |  3 ++
 usr/lib/libc/crt0.S            |  1 +
 usr/lib/libc/include/syscall.h |  2 ++
 7 files changed, 91 insertions(+)

diff --git a/rapport.md b/rapport.md
index e69de29..7c320ce 100644
--- a/rapport.md
+++ b/rapport.md
@@ -0,0 +1,19 @@
+# Rapport labo 4
+
+### Fichier [so3/include/syscall.h](so3/include/syscall.h)
+Ici, on définit la macro `SYSCALL_FORK2` avec le nombre 121 dans le kernel ce qui nous permettra de faire le lien  plus tard.
+### Fichier [so3/include/process.h](so3/include/process.h)
+Ici, on déclare un nouvelle fonction `do_fork2()` que nous appelerons lorsque que le syscall spécifique sera appelé
+### Fichier [so3/kernel/process.c](so3/kernel/process.c)
+Ici, c'est l'implémentation dans le kernell de la fonction `do_fork2()` qui va faire un nouveau fork. C'est le code qui va être exécuter quand un appel système fork2 va être fait.
+La dedans on pouvoir imprimer le pid du parent et de l'enfant en mettant cette ligne de code: `printk("fork2() -> process %s with pid %d forked to child with pid %d \n", parent->name, parent->pid, newp->pid );`
+### Fichier [so3/kernel/syscall.c](so3/kernel/syscall.c)
+La fonction syscall_handle que l'on modifie gère les macros au niveau du kernell dans des switch/case qui gère les appels système et s'occupe d'appeler notre fonction fork2() et le résultat et mit dans une variable result qui renvoie le résultat de la fonction au usr. Ici c'est un PID pour `sys_fork2()`.
+### Fichier [usr/lib/libc/include/syscall.h](usr/lib/libc/include/syscall.h)
+Ici, on définit la macro au niveau usr `syscallFork2` qui nous permet de faire le lien plus tard entre usr et kernel.
+
+### Fichier [usr/lib/libc/crt0.S](usr/lib/libc/crt0.S)
+
+C'est un fichier écrit principalement en assembleur avec certaines macro. Ca permet de faire l'interface entre le kernel et le user
+le `SYSCALLSTUB` est une macro/fonction qui définit les codes des syscalls qui prends 
+ un nom et un number en paramètre. Ensuite on met le number dans un registre x8 avec le move puis le on utilise la fonction `svc 0` qui est l'instruction syscall qui permet de passe du usr au kernel.
diff --git a/so3/include/process.h b/so3/include/process.h
index dd9d656..8a814dc 100644
--- a/so3/include/process.h
+++ b/so3/include/process.h
@@ -138,6 +138,7 @@ uint32_t do_getpid(void);
 
 int do_execve(const char *filename, char **argv, char **envp);
 int do_fork(void);
+int do_fork2(void);
 void do_exit(int exit_status);
 int do_waitpid(int pid, uint32_t *wstatus, uint32_t options);
 
diff --git a/so3/include/syscall.h b/so3/include/syscall.h
index 3370872..0522bfa 100644
--- a/so3/include/syscall.h
+++ b/so3/include/syscall.h
@@ -1,3 +1,5 @@
+
+
 /*
  * Copyright (C) 2014-2019 Daniel Rossier <daniel.rossier@heig-vd.ch>
  * Copyright (C) 2017 Xavier Ruppen <xavier.ruppen@heig-vd.ch>
@@ -92,6 +94,7 @@
 // LEI: 2021_lab05
 #define SYSCALL_TRANSLATE   120
 
+#define SYSCALL_FORK2		121
 #ifndef __ASSEMBLY__
 
 #include <errno.h>
diff --git a/so3/kernel/process.c b/so3/kernel/process.c
index 0288cdf..94d922c 100644
--- a/so3/kernel/process.c
+++ b/so3/kernel/process.c
@@ -840,6 +840,68 @@ int do_fork(void)
 	return newp->pid;
 }
 
+
+/*
+ * For a new process from the current running process.
+ */
+int do_fork2(void)
+{
+	pcb_t *newp, *parent;
+	unsigned long flags;
+
+	flags = local_irq_save();
+
+	parent = current()->pcb;
+
+	/* For the time being, we *only* authorize to fork() from the main thread */
+	if (current() != parent->main_thread) {
+		printk("%s: forking from a thread other than the main thread is not allowed so far ...\n", __func__);
+		return -1;
+	}
+
+	/* Duplicate the elements of the parent process into the child */
+	newp = duplicate_process(parent);
+
+	/* Copy the user space area of the parent process */
+	duplicate_user_space(parent, newp);
+
+	/* At the moment, we spawn the main_thread only in the child. In the future, we will have to create a thread for each existing threads
+	 * in the parent process.
+	 */
+	sprintf(newp->name, "%s_child_%d", parent->name, newp->pid);
+
+	newp->main_thread = user_thread(NULL, newp->name, (void *) arch_get_args_base(), newp);
+
+	/* Copy the kernel stack of the main thread */
+	memcpy((void *) get_kernel_stack_top(newp->main_thread->stack_slotID) - THREAD_STACK_SIZE,
+	       (void *) get_kernel_stack_top(parent->main_thread->stack_slotID) - THREAD_STACK_SIZE, THREAD_STACK_SIZE);
+
+	/*
+	 * Preserve the current value of all registers concerned by this execution so that
+	 * the new thread will be able to pursue its execution once scheduled.
+	 */
+
+	__save_context(newp->main_thread, get_kernel_stack_top(newp->main_thread->stack_slotID));
+
+	/* The main process thread is ready to be scheduled for its execution.*/
+	newp->state = PROC_STATE_READY;
+	
+	BUG_ON(!local_irq_is_disabled());
+
+	/* Prepare to perform scheduling to check if a context switch is required. */
+	raise_softirq(SCHEDULE_SOFTIRQ);
+
+	local_irq_restore(flags);
+
+	printk("fork2() -> process %s with pid %d forked to child with pid %d \n", parent->name, parent->pid, newp->pid );
+
+	/* Return the PID of the child process. The child will do not execute this code, since
+	 * it jumps to the ret_from_fork in context.S
+	 */
+	return newp->pid;
+}
+
+
 /*
  * Terminates a process.
  * All allocated resources should be released except its PCB which still contains the exit code.
diff --git a/so3/kernel/syscalls.c b/so3/kernel/syscalls.c
index 03c6a06..2d55a9d 100644
--- a/so3/kernel/syscalls.c
+++ b/so3/kernel/syscalls.c
@@ -111,6 +111,9 @@ long syscall_handle(unsigned long r0, unsigned long r1, unsigned long r2, unsign
 		case SYSCALL_FORK:
 			result = do_fork();
 			break;
+		case SYSCALL_FORK2:
+			result = do_fork2();
+			break;			
 
 		case SYSCALL_WAITPID:
 			result = do_waitpid(r0, (uint32_t *) r1, r2);
diff --git a/usr/lib/libc/crt0.S b/usr/lib/libc/crt0.S
index fc15eb0..9ffad66 100755
--- a/usr/lib/libc/crt0.S
+++ b/usr/lib/libc/crt0.S
@@ -120,6 +120,7 @@ SYSCALLSTUB sys_execve,			syscallExecve
 SYSCALLSTUB sys_waitpid,		syscallWaitpid
 SYSCALLSTUB sys_pause, 			syscallPause
 SYSCALLSTUB sys_fork, 			syscallFork
+SYSCALLSTUB sys_fork2, 			syscallFork2
 SYSCALLSTUB sys_readdir, 		syscallReaddir
 SYSCALLSTUB sys_chdir, 			syscallChdir
 SYSCALLSTUB sys_getcwd, 		syscallGetcwd
diff --git a/usr/lib/libc/include/syscall.h b/usr/lib/libc/include/syscall.h
index 651c4bc..489f853 100644
--- a/usr/lib/libc/include/syscall.h
+++ b/usr/lib/libc/include/syscall.h
@@ -98,6 +98,8 @@
 // LEI: 2021_lab05
 #define syscallTranslate        120
 
+#define syscallFork2		121
+
 #define SYSINFO_DUMP_HEAP	0
 #define SYSINFO_DUMP_SCHED	1
 #define SYSINFO_TEST_MALLOC	2
-- 
GitLab

